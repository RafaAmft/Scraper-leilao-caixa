#!/usr/bin/env python3
"""
Script autom√°tico para buscar im√≥veis em todas as cidades configuradas
"""

import time
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import json
import os
import sys

# Adicionar o diret√≥rio src ao path
sys.path.append('src')

from scraper_caixa.scraper import buscar_imoveis_com_filtros

def carregar_configuracao():
    """Carrega configura√ß√£o das cidades"""
    try:
        with open('configuracao_cidades.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå Arquivo de configura√ß√£o n√£o encontrado!")
        return None

def enviar_email_relatorio(relatorio):
    """Envia relat√≥rio por email"""
    # CONFIGURAR AQUI SUAS INFORMA√á√ïES DE EMAIL
    EMAIL_REMETENTE = "seu_email@gmail.com"  # ‚ö†Ô∏è ALTERAR
    EMAIL_DESTINATARIO = "destinatario@email.com"  # ‚ö†Ô∏è ALTERAR
    SENHA_APP = "sua_senha_de_app"  # ‚ö†Ô∏è ALTERAR - Senha de app do Gmail
    
    try:
        # Criar mensagem
        msg = MIMEMultipart()
        msg['From'] = EMAIL_REMETENTE
        msg['To'] = EMAIL_DESTINATARIO
        msg['Subject'] = f"Relat√≥rio de Im√≥veis - {datetime.now().strftime('%d/%m/%Y')}"
        
        # Corpo do email
        corpo = f"""
RELAT√ìRIO DI√ÅRIO DE IM√ìVEIS - CAIXA
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}

{relatorio}

---
Gerado automaticamente pelo Scraper Im√≥veis Caixa
        """
        
        msg.attach(MIMEText(corpo, 'plain', 'utf-8'))
        
        # Enviar email
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(EMAIL_REMETENTE, SENHA_APP)
        server.send_message(msg)
        server.quit()
        
        print("‚úÖ Email enviado com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro ao enviar email: {e}")
        print("üí° Dica: Configure as informa√ß√µes de email no script")

def buscar_todas_cidades():
    """Busca im√≥veis em todas as cidades configuradas"""
    config = carregar_configuracao()
    if not config:
        return
    
    relatorio_completo = []
    total_imoveis = 0
    cidades_processadas = 0
    
    print("üöÄ Iniciando busca autom√°tica de im√≥veis...")
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    for estado, cidades in config['cidades'].items():
        print(f"\nüìç Processando estado: {estado}")
        
        for codigo, nome in cidades.items():
            cidades_processadas += 1
            print(f"\nüèôÔ∏è [{cidades_processadas}] Buscando em {nome}/{estado}...")
            
            # Configurar filtros (ajustar conforme necess√°rio)
            filtros = {
                'estado': estado,
                'codigo_cidade': codigo,
                'nome_cidade': nome,
                'tipo_imovel': '4',  # Indiferente
                'faixa_valor': None,  # Indiferente
                'quartos': None       # Indiferente
            }
            
            try:
                imoveis = buscar_imoveis_com_filtros(filtros)
                
                if imoveis:
                    relatorio_cidade = f"\nüèôÔ∏è {nome}/{estado}: {len(imoveis)} im√≥veis encontrados"
                    
                    # Mostrar os 5 primeiros im√≥veis
                    for i, imovel in enumerate(imoveis[:5], 1):
                        relatorio_cidade += f"\n  {i}. {imovel['nome_imovel']} - R$ {imovel['valor']}"
                    
                    if len(imoveis) > 5:
                        relatorio_cidade += f"\n  ... e mais {len(imoveis) - 5} im√≥veis"
                    
                    relatorio_completo.append(relatorio_cidade)
                    total_imoveis += len(imoveis)
                else:
                    relatorio_completo.append(f"\nüèôÔ∏è {nome}/{estado}: Nenhum im√≥vel encontrado")
                
                time.sleep(2)  # Pausa entre buscas
                
            except Exception as e:
                relatorio_completo.append(f"\n‚ùå {nome}/{estado}: Erro - {e}")
                print(f"‚ùå Erro em {nome}: {e}")
    
    # Criar relat√≥rio final
    relatorio_final = f"""
üìä RELAT√ìRIO DI√ÅRIO DE IM√ìVEIS - CAIXA
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
Cidades processadas: {cidades_processadas}
Total de im√≥veis encontrados: {total_imoveis}

{''.join(relatorio_completo)}

---
Relat√≥rio gerado automaticamente
    """
    
    # Salvar relat√≥rio em arquivo
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename_relatorio = f'relatorio_{timestamp}.txt'
    with open(filename_relatorio, 'w', encoding='utf-8') as f:
        f.write(relatorio_final)
    
    print(f"\n‚úÖ Relat√≥rio salvo em '{filename_relatorio}'")
    print(f"üìä Total de im√≥veis encontrados: {total_imoveis}")
    
    # Enviar por email
    print("\nüìß Enviando relat√≥rio por email...")
    enviar_email_relatorio(relatorio_final)
    
    return relatorio_final

if __name__ == "__main__":
    buscar_todas_cidades() 