#!/usr/bin/env python3
"""
Script de teste detalhado que executa cada etapa separadamente
"""

import sys
import os
import time

# Adicionar o diret√≥rio src ao path
sys.path.append('src')

def testar_etapa_por_etapa():
    """Testa cada etapa do scraper separadamente"""
    try:
        from scraper_caixa.scraper import configurar_chromedriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.wait import WebDriverWait
        from selenium.webdriver.support.select import Select
        from selenium.webdriver.support import expected_conditions as EC
        
        print("üß™ TESTE DETALHADO ETAPA POR ETAPA")
        print("=" * 60)
        
        # Configurar driver
        print("üîß Configurando ChromeDriver...")
        driver = configurar_chromedriver(headless=False)  # Com interface para debug
        
        try:
            # ETAPA 1: Acessar p√°gina
            print("\nüìç ETAPA 1: Acessando p√°gina...")
            driver.get("https://venda-imoveis.caixa.gov.br/sistema/busca-imovel.asp?sltTipoBusca=imoveis")
            print("‚úÖ P√°gina acessada com sucesso")
            
            # Aguardar p√°gina carregar
            wait = WebDriverWait(driver, 20)
            time.sleep(5)
            
            # ETAPA 2: Verificar t√≠tulo e URL
            print("\nüìç ETAPA 2: Verificando p√°gina...")
            titulo = driver.title
            url_atual = driver.current_url
            print(f"‚úÖ T√≠tulo: {titulo}")
            print(f"‚úÖ URL: {url_atual}")
            
            # ETAPA 3: Aguardar e selecionar estado
            print("\nüìç ETAPA 3: Selecionando estado...")
            try:
                select_estado = wait.until(EC.element_to_be_clickable((By.ID, "cmb_estado")))
                print("‚úÖ Elemento de estado encontrado")
                
                select_estado = Select(select_estado)
                select_estado.select_by_value("SC")
                print("‚úÖ Estado SC selecionado")
                
                # Verificar sele√ß√£o
                estado_selecionado = select_estado.first_selected_option.text
                print(f"‚úÖ Estado selecionado: {estado_selecionado}")
                
            except Exception as e:
                print(f"‚ùå Erro ao selecionar estado: {e}")
                return False
            
            # ETAPA 4: Aguardar carregamento das cidades
            print("\nüìç ETAPA 4: Aguardando carregamento das cidades...")
            time.sleep(5)
            
            # Verificar se as cidades carregaram
            try:
                select_cidade = driver.find_element(By.ID, "cmb_cidade")
                select_cidade = Select(select_cidade)
                num_opcoes = len(select_cidade.options)
                print(f"‚úÖ Campo de cidade encontrado com {num_opcoes} op√ß√µes")
                
                if num_opcoes <= 1:
                    print("‚ö†Ô∏è Cidades ainda n√£o carregaram. Aguardando mais...")
                    time.sleep(5)
                    select_cidade = Select(driver.find_element(By.ID, "cmb_cidade"))
                    num_opcoes = len(select_cidade.options)
                    print(f"‚úÖ Ap√≥s espera: {num_opcoes} op√ß√µes")
                
            except Exception as e:
                print(f"‚ùå Erro ao verificar cidades: {e}")
                return False
            
            # ETAPA 5: Selecionar cidade
            print("\nüìç ETAPA 5: Selecionando cidade...")
            try:
                select_cidade.select_by_value("8690")  # JOINVILLE
                print("‚úÖ Cidade JOINVILLE selecionada")
                
                # Verificar sele√ß√£o
                cidade_selecionada = select_cidade.first_selected_option.text
                print(f"‚úÖ Cidade selecionada: {cidade_selecionada}")
                
            except Exception as e:
                print(f"‚ùå Erro ao selecionar cidade: {e}")
                return False
            
            # ETAPA 6: Clicar no primeiro bot√£o Pr√≥ximo
            print("\nüìç ETAPA 6: Clicando no primeiro bot√£o Pr√≥ximo...")
            try:
                btn_next = wait.until(EC.element_to_be_clickable((By.ID, "btn_next0")))
                btn_next.click()
                print("‚úÖ Primeiro bot√£o Pr√≥ximo clicado")
                time.sleep(3)
                
            except Exception as e:
                print(f"‚ùå Erro ao clicar no primeiro bot√£o: {e}")
                print("üîÑ Tentando com JavaScript...")
                try:
                    driver.execute_script("document.getElementById('btn_next0').click();")
                    print("‚úÖ Primeiro bot√£o Pr√≥ximo clicado via JavaScript")
                    time.sleep(3)
                except Exception as e2:
                    print(f"‚ùå Erro tamb√©m com JavaScript: {e2}")
                    return False
            
            # ETAPA 7: Verificar se chegou na pr√≥xima p√°gina
            print("\nüìç ETAPA 7: Verificando pr√≥xima p√°gina...")
            try:
                # Verificar se h√° campos de filtro
                campos_filtro = driver.find_elements(By.ID, "cmb_tp_imovel")
                if campos_filtro:
                    print("‚úÖ Campos de filtro encontrados")
                else:
                    print("‚ö†Ô∏è Campos de filtro n√£o encontrados")
                
                # Fazer screenshot para debug
                timestamp = time.strftime("%Y%m%d_%H%M%S")
                screenshot_path = f"debug_etapa7_{timestamp}.png"
                driver.save_screenshot(screenshot_path)
                print(f"‚úÖ Screenshot salvo em: {screenshot_path}")
                
            except Exception as e:
                print(f"‚ùå Erro ao verificar pr√≥xima p√°gina: {e}")
                return False
            
            print("\nüéâ TODAS AS ETAPAS FORAM EXECUTADAS COM SUCESSO!")
            return True
            
        finally:
            driver.quit()
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO TESTE DETALHADO")
    print("=" * 60)
    print("‚ö†Ô∏è Este teste executar√° cada etapa separadamente")
    print("   para identificar exatamente onde est√° o problema.")
    
    confirmacao = input("\nDeseja continuar? (s/n): ").lower().strip()
    if confirmacao not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Teste cancelado pelo usu√°rio.")
        return False
    
    try:
        resultado = testar_etapa_por_etapa()
        
        if resultado:
            print("\nüéØ RESULTADO: TESTE PASSOU!")
            print("üí° Todas as etapas funcionaram corretamente.")
        else:
            print("\nüéØ RESULTADO: TESTE FALHOU!")
            print("‚ö†Ô∏è Uma ou mais etapas falharam. Verifique os logs acima.")
        
        return resultado
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Teste interrompido pelo usu√°rio.")
        return False
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        return False

if __name__ == "__main__":
    main() 