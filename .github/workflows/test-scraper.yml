name: üß™ Teste do Scraper (v2)

on:
  # Executar em pull requests
  pull_request:
    branches: [ main ]
  
  # Execu√ß√£o manual
  workflow_dispatch:
    inputs:
      cidade_teste:
        description: 'Cidade para teste (ex: JOINVILLE)'
        required: false
        default: 'JOINVILLE'
        type: string
  schedule:
    - cron: '0 11 * * *'

jobs:
  test-scraper:
    name: üß™ Testar Scraper
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v4
        
      - name: üêç Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: üì¶ Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install selenium webdriver-manager pandas beautifulsoup4 requests
          
      - name: üñ•Ô∏è Instalar Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version
          
      - name: üîß Configurar vari√°veis de ambiente
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
          echo "DISPLAY=:99" >> $GITHUB_ENV
          
      - name: üß™ Executar teste do scraper
        run: |
          echo "üß™ Executando teste do scraper..."
          echo "=================================="
          
          # Executar com log detalhado
          python testes/teste_script_automatico.py 2>&1 | tee scraper_output.log
          
          # Verificar c√≥digo de sa√≠da
          EXIT_CODE=$?
          echo "C√≥digo de sa√≠da do scraper: $EXIT_CODE"
          
          # Salvar log para an√°lise
          echo "üìÑ Log completo salvo em scraper_output.log"
          
          # Verificar se executou com sucesso
          if [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Scraper executou com sucesso!"
          else
            echo "‚ùå Scraper falhou com c√≥digo $EXIT_CODE"
            echo "üìÑ √öltimas linhas do log:"
            tail -20 scraper_output.log
          fi
          
      - name: üìä Verificar arquivos gerados
        run: |
          echo "üìÅ VERIFICA√á√ÉO DOS ARQUIVOS GERADOS:"
          echo "==================================="
          
          # Listar todos os arquivos no diret√≥rio
          echo "üìã Todos os arquivos no diret√≥rio:"
          ls -la
          
          echo ""
          echo "üìÅ ARQUIVOS ESPEC√çFICOS:"
          echo "========================="
          
          # Verificar relat√≥rios
          if ls teste_relatorio_*.txt 1> /dev/null 2>&1; then
            echo "‚úÖ Relat√≥rios de teste encontrados:"
            ls -la teste_relatorio_*.txt
          else
            echo "‚ùå Nenhum relat√≥rio de teste encontrado"
          fi
          
          # Verificar dados
          if ls imoveis_*.json 1> /dev/null 2>&1; then
            echo "‚úÖ Dados JSON encontrados:"
            ls -la imoveis_*.json
          else
            echo "‚ùå Nenhum dado JSON encontrado"
          fi
          
          # Verificar screenshots
          if ls screenshot_*.png 1> /dev/null 2>&1; then
            echo "‚úÖ Screenshots encontrados:"
            ls -la screenshot_*.png
          else
            echo "‚ùå Nenhum screenshot encontrado"
          fi
          
          # Verificar se pelo menos um arquivo foi gerado
          TOTAL_FILES=$(find . -maxdepth 1 -name "teste_relatorio_*.txt" -o -name "imoveis_*.json" -o -name "screenshot_*.png" | wc -l)
          echo ""
          echo "üìä Total de arquivos relevantes: $TOTAL_FILES"
          
          if [ $TOTAL_FILES -eq 0 ]; then
            echo "‚ùå Nenhum arquivo foi gerado pelo scraper!"
            exit 1
          fi
          
      - name: üì§ Upload de resultados como artifacts
        uses: actions/upload-artifact@v4
        with:
          name: resultados-teste-${{ github.run_number }}
          path: |
            teste_relatorio_*.txt
            imoveis_*.json
            imoveis_*.csv
            screenshot_*.png
          retention-days: 3
          
      - name: üìà Resumo do teste
        run: |
          echo "üìä RESUMO DO TESTE:"
          echo "==================="
          echo "Data/Hora: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Contar arquivos
          echo ""
          echo "üìÅ ARQUIVOS GERADOS:"
          echo "==================="
          echo "Relat√≥rios de teste: $(ls teste_relatorio_*.txt 2>/dev/null | wc -l || echo 0)"
          echo "Dados JSON: $(ls imoveis_*.json 2>/dev/null | wc -l || echo 0)"
          echo "Dados CSV: $(ls imoveis_*.csv 2>/dev/null | wc -l || echo 0)"
          echo "Screenshots: $(ls screenshot_*.png 2>/dev/null | wc -l || echo 0)"
          
          # Verificar se o teste foi bem-sucedido
          if [ $(ls teste_relatorio_*.txt 2>/dev/null | wc -l) -gt 0 ] && [ $(ls imoveis_*.json 2>/dev/null | wc -l) -gt 0 ]; then
            echo ""
            echo "‚úÖ TESTE CONCLU√çDO COM SUCESSO!"
            echo "O scraper est√° funcionando corretamente."
          else
            echo ""
            echo "‚ùå TESTE FALHOU!"
            echo "Verifique os logs para identificar o problema."
            exit 1
          fi 