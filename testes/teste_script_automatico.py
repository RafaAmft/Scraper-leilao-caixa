#!/usr/bin/env python3
"""
Teste do script autom√°tico com apenas uma cidade
"""

import time
import socket
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import json
import os
import sys

# Adicionar o diret√≥rio src ao path
sys.path.append('src')

from scraper_caixa.scraper import buscar_imoveis_com_filtros

def carregar_config_gmail():
    """Carrega a configura√ß√£o do Gmail com m√∫ltiplos destinat√°rios"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    config_dir = os.path.join(script_dir, '..', 'config')
    config_file = os.path.join(config_dir, "gmail_config_multiplos.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return {
        'email_remetente': None,
        'email_destinatarios': []
    }

def enviar_email_relatorio(relatorio, relatorio_detalhado):
    """Envia relat√≥rio por email usando Gmail com m√∫ltiplos destinat√°rios"""
    SENHA_APP = "hfvk igne yago hwou"  # Senha de app fornecida
    config_gmail = carregar_config_gmail()
    EMAIL_REMETENTE = config_gmail.get('email_remetente')
    EMAIL_DESTINATARIOS = config_gmail.get('email_destinatarios', [])
    
    if not EMAIL_REMETENTE:
        print("‚ùå Email remetente n√£o configurado!")
        print("üí° Execute 'python config/configurar_gmail_multiplos.py' para configurar")
        return
    
    if not EMAIL_DESTINATARIOS:
        print("‚ùå Nenhum destinat√°rio configurado!")
        print("üí° Execute 'python config/configurar_gmail_multiplos.py' para configurar")
        return
    
    print(f"üìß Enviando para {len(EMAIL_DESTINATARIOS)} destinat√°rio(s)...")
    
    # Enviar para cada destinat√°rio
    emails_enviados = 0
    for i, email_destinatario in enumerate(EMAIL_DESTINATARIOS, 1):
        print(f"\nüìß [{i}/{len(EMAIL_DESTINATARIOS)}] Enviando para: {email_destinatario}")
        
        # Tentar envio com retry
        max_tentativas = 3
        for tentativa in range(max_tentativas):
            try:
                print(f"   Tentativa {tentativa + 1}/{max_tentativas}...")
                
                # Criar mensagem
                msg = MIMEMultipart()
                msg['From'] = EMAIL_REMETENTE
                msg['To'] = email_destinatario
                msg['Subject'] = f"TESTE - Relat√≥rio de Im√≥veis - {datetime.now().strftime('%d/%m/%Y')}"
                corpo = f"""
{relatorio}

---
Relat√≥rio detalhado anexado.
Gerado automaticamente pelo Scraper Im√≥veis Caixa (TESTE)
                """
                msg.attach(MIMEText(corpo, 'plain', 'utf-8'))
                relatorio_anexo = MIMEText(relatorio_detalhado, 'plain', 'utf-8')
                relatorio_anexo.add_header('Content-Disposition', 'attachment', filename=f'teste_relatorio_detalhado_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt')
                msg.attach(relatorio_anexo)
                
                # Conectar com timeout maior
                server = smtplib.SMTP('smtp.gmail.com', 587, timeout=60)
                server.starttls()
                server.login(EMAIL_REMETENTE, SENHA_APP)
                server.send_message(msg)
                server.quit()
                print(f"   ‚úÖ Email enviado com sucesso para {email_destinatario}")
                emails_enviados += 1
                break  # Sucesso, sair do loop de tentativas
                
            except smtplib.SMTPAuthenticationError as e:
                print(f"   ‚ùå Erro de autentica√ß√£o: {e}")
                break  # N√£o tentar novamente para erro de auth
            except smtplib.SMTPRecipientsRefused as e:
                print(f"   ‚ùå Destinat√°rio recusado: {e}")
                break  # N√£o tentar novamente para erro de destinat√°rio
            except (socket.timeout, socket.gaierror, ConnectionError) as e:
                print(f"   ‚ùå Erro de conectividade (tentativa {tentativa + 1}): {e}")
                if tentativa < max_tentativas - 1:
                    print("   ‚è≥ Aguardando 10 segundos antes da pr√≥xima tentativa...")
                    time.sleep(10)
                else:
                    print(f"   ‚ùå Falha ao enviar para {email_destinatario}")
            except Exception as e:
                print(f"   ‚ùå Erro inesperado (tentativa {tentativa + 1}): {e}")
                if tentativa < max_tentativas - 1:
                    print("   ‚è≥ Aguardando 5 segundos antes da pr√≥xima tentativa...")
                    time.sleep(5)
                else:
                    print(f"   ‚ùå Falha ao enviar para {email_destinatario}")
    
    if emails_enviados > 0:
        print(f"\n‚úÖ {emails_enviados}/{len(EMAIL_DESTINATARIOS)} emails enviados com sucesso!")
    else:
        print("\n‚ùå Nenhum email foi enviado com sucesso")
        print("üí° O relat√≥rio foi salvo em arquivo local")

def main():
    """Fun√ß√£o principal do teste"""
    print("\nüß™ TESTE DO SCRIPT AUTOM√ÅTICO")
    print("=" * 50)
    print("Este teste executa apenas uma cidade para verificar o funcionamento")
    print("sem precisar coletar todos os dados novamente.")
    
    # Configurar apenas uma cidade para teste
    cidade_teste = {
        'estado': 'SC',
        'codigo_cidade': '8690',  # JOINVILLE (c√≥digo correto)
        'nome_cidade': 'JOINVILLE',
        'tipo_imovel': '4',  # Indiferente
        'faixa_valor': None,  # Indiferente
        'quartos': None       # Indiferente
    }
    
    print(f"\nüèôÔ∏è Testando cidade: {cidade_teste['nome_cidade']}/{cidade_teste['estado']}")
    
    try:
        # Buscar im√≥veis
        print("\nüîç Iniciando busca de im√≥veis...")
        imoveis = buscar_imoveis_com_filtros(cidade_teste)
        
        if imoveis:
            print(f"‚úÖ {len(imoveis)} im√≥veis encontrados!")
            
            # Gerar relat√≥rio detalhado com todas as informa√ß√µes
            relatorio_detalhado = f"""
üß™ TESTE - RELAT√ìRIO DETALHADO DE IM√ìVEIS - CAIXA
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
Cidade testada: {cidade_teste['nome_cidade']}/{cidade_teste['estado']}
Total de im√≥veis encontrados: {len(imoveis)}

üèôÔ∏è {cidade_teste['nome_cidade']}/{cidade_teste['estado']}: {len(imoveis)} im√≥veis encontrados

"""
            
            # Mostrar TODOS os im√≥veis com informa√ß√µes completas
            for i, imovel in enumerate(imoveis, 1):
                relatorio_detalhado += f"\n  {i}. {imovel['nome_imovel']}"
                
                # Adicionar quartos se dispon√≠vel
                if imovel.get('quartos'):
                    relatorio_detalhado += f"\n     üõèÔ∏è {imovel['quartos']} quarto(s)"
                
                # Adicionar valor
                relatorio_detalhado += f"\n     üí∞ R$ {imovel['valor']}"
                
                # Adicionar endere√ßo se dispon√≠vel
                if imovel.get('endereco'):
                    relatorio_detalhado += f"\n     üìç {imovel['endereco']}"
                
                # Adicionar link direto
                if imovel.get('link_direto'):
                    relatorio_detalhado += f"\n     üîó {imovel['link_direto']}"
                elif imovel.get('id_imovel'):
                    relatorio_detalhado += f"\n     üîó https://venda-imoveis.caixa.gov.br/sistema/detalhe-imovel.asp?hdnOrigem=index&txtImovel={imovel['id_imovel']}"
                
                relatorio_detalhado += "\n"
            
            relatorio_detalhado += "\n---\nTESTE - Relat√≥rio gerado automaticamente"
            
            # Gerar relat√≥rio resumido
            relatorio_resumido = f"TESTE - Ol√°, hoje √© dia {datetime.now().strftime('%d/%m/%Y')}, foram localizados {len(imoveis)} im√≥veis em {cidade_teste['nome_cidade']}/{cidade_teste['estado']}."
            
            # Salvar relat√≥rios
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            filename_resumido = f'teste_relatorio_resumido_{timestamp}.txt'
            with open(filename_resumido, 'w', encoding='utf-8') as f:
                f.write(relatorio_resumido)
            
            filename_detalhado = f'teste_relatorio_detalhado_{timestamp}.txt'
            with open(filename_detalhado, 'w', encoding='utf-8') as f:
                f.write(relatorio_detalhado)
            
            print(f"\n‚úÖ Relat√≥rio resumido salvo em '{filename_resumido}'")
            print(f"‚úÖ Relat√≥rio detalhado salvo em '{filename_detalhado}'")
            
            # Mostrar relat√≥rio resumido
            print(f"\nüìß RELAT√ìRIO RESUMIDO:")
            print(f"   {relatorio_resumido}")
            
            # Enviar por email
            print("\nüìß Preparando envio por email...")
            enviar_email_relatorio(relatorio_resumido, relatorio_detalhado)
            
        else:
            print("‚ùå Nenhum im√≥vel encontrado!")
    
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
    
    print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
    print("‚úÖ Busca de im√≥veis funcionando")
    print("‚úÖ Gera√ß√£o de relat√≥rios funcionando")
    print("‚úÖ Envio de email funcionando")

if __name__ == "__main__":
    main() 