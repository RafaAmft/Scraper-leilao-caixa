#!/usr/bin/env python3
"""
Teste do script autom√°tico com apenas uma cidade
"""

import time
import socket
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import json
import os
import sys

# Adicionar o diret√≥rio src ao path
sys.path.append('src')

from scraper_caixa.scraper import buscar_imoveis_com_filtros

def carregar_config_gmail():
    """Carrega a configura√ß√£o do Gmail"""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    config_dir = os.path.join(script_dir, 'config')
    config_file = os.path.join(config_dir, "gmail_config.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            pass
    return {
        'email_remetente': None,
        'email_destinatario': None
    }

def enviar_email_relatorio(relatorio, relatorio_detalhado):
    """Envia relat√≥rio por email usando Gmail com senha de app"""
    SENHA_APP = "hfvk igne yago hwou"  # Senha de app fornecida
    config_gmail = carregar_config_gmail()
    EMAIL_REMETENTE = config_gmail.get('email_remetente')
    EMAIL_DESTINATARIO = config_gmail.get('email_destinatario')
    if not EMAIL_REMETENTE or not EMAIL_DESTINATARIO:
        print("‚ùå Email remetente ou destinat√°rio n√£o configurado!")
        print("üí° Execute 'python config/configurar_gmail.py' para configurar")
        return
    
    # Tentar envio com retry
    max_tentativas = 3
    for tentativa in range(max_tentativas):
        try:
            print(f"üìß Tentativa {tentativa + 1}/{max_tentativas} de envio de email...")
            print(f"   De: {EMAIL_REMETENTE}")
            print(f"   Para: {EMAIL_DESTINATARIO}")
            
            # Criar mensagem
            msg = MIMEMultipart()
            msg['From'] = EMAIL_REMETENTE
            msg['To'] = EMAIL_DESTINATARIO
            msg['Subject'] = f"TESTE - Relat√≥rio de Im√≥veis - {datetime.now().strftime('%d/%m/%Y')}"
            corpo = f"""
{relatorio}

---
TESTE - Relat√≥rio detalhado anexado.
Gerado automaticamente pelo Scraper Im√≥veis Caixa (TESTE)
            """
            msg.attach(MIMEText(corpo, 'plain', 'utf-8'))
            relatorio_anexo = MIMEText(relatorio_detalhado, 'plain', 'utf-8')
            relatorio_anexo.add_header('Content-Disposition', 'attachment', filename=f'teste_relatorio_detalhado_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt')
            msg.attach(relatorio_anexo)
            
            # Conectar com timeout maior
            server = smtplib.SMTP('smtp.gmail.com', 587, timeout=60)
            server.starttls()
            server.login(EMAIL_REMETENTE, SENHA_APP)
            server.send_message(msg)
            server.quit()
            print("‚úÖ Email enviado com sucesso!")
            return  # Sucesso, sair da fun√ß√£o
            
        except smtplib.SMTPAuthenticationError as e:
            print(f"‚ùå Erro de autentica√ß√£o: {e}")
            break  # N√£o tentar novamente para erro de auth
        except smtplib.SMTPRecipientsRefused as e:
            print(f"‚ùå Destinat√°rio recusado: {e}")
            break  # N√£o tentar novamente para erro de destinat√°rio
        except (socket.timeout, socket.gaierror, ConnectionError) as e:
            print(f"‚ùå Erro de conectividade (tentativa {tentativa + 1}): {e}")
            if tentativa < max_tentativas - 1:
                print("‚è≥ Aguardando 10 segundos antes da pr√≥xima tentativa...")
                time.sleep(10)
            else:
                print("‚ùå Todas as tentativas falharam")
        except Exception as e:
            print(f"‚ùå Erro inesperado (tentativa {tentativa + 1}): {e}")
            if tentativa < max_tentativas - 1:
                print("‚è≥ Aguardando 5 segundos antes da pr√≥xima tentativa...")
                time.sleep(5)
            else:
                print("‚ùå Todas as tentativas falharam")
    
    print("üí° O relat√≥rio foi salvo em arquivo local")
    print("üí° Verifique se o email remetente, destinat√°rio e senha de app est√£o corretos")

def teste_uma_cidade():
    """Testa o script com apenas uma cidade"""
    
    print("üß™ TESTE DO SCRIPT AUTOM√ÅTICO")
    print("=" * 50)
    print("Este teste executa apenas uma cidade para verificar o funcionamento")
    print("sem precisar coletar todos os dados novamente.")
    print()
    
    # Configurar apenas uma cidade para teste
    cidade_teste = {
        'estado': 'SC',
        'codigo_cidade': '8690',  # JOINVILLE (c√≥digo correto)
        'nome_cidade': 'JOINVILLE',
        'tipo_imovel': '4',  # Indiferente
        'faixa_valor': None,  # Indiferente
        'quartos': None       # Indiferente
    }
    
    print(f"üèôÔ∏è Testando cidade: {cidade_teste['nome_cidade']}/{cidade_teste['estado']}")
    print()
    
    try:
        # Buscar im√≥veis
        print("üîç Iniciando busca de im√≥veis...")
        imoveis = buscar_imoveis_com_filtros(cidade_teste)
        
        if imoveis:
            print(f"‚úÖ {len(imoveis)} im√≥veis encontrados!")
            
            # Mostrar os 3 primeiros im√≥veis
            print("\nüìã PRIMEIROS IM√ìVEIS ENCONTRADOS:")
            for i, imovel in enumerate(imoveis[:3], 1):
                print(f"  {i}. {imovel['nome_imovel']} - R$ {imovel['valor']}")
            
            if len(imoveis) > 3:
                print(f"  ... e mais {len(imoveis) - 3} im√≥veis")
            
            # Gerar relat√≥rio de teste
            data_atual = datetime.now().strftime("%d/%m/%Y")
            relatorio_resumido = f"TESTE - Ol√°, hoje √© dia {data_atual}, foram localizados {len(imoveis)} im√≥veis em {cidade_teste['nome_cidade']}/{cidade_teste['estado']}."
            
            relatorio_detalhado = f"""
üß™ TESTE - RELAT√ìRIO DETALHADO DE IM√ìVEIS - CAIXA
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
Cidade testada: {cidade_teste['nome_cidade']}/{cidade_teste['estado']}
Total de im√≥veis encontrados: {len(imoveis)}

üèôÔ∏è {cidade_teste['nome_cidade']}/{cidade_teste['estado']}: {len(imoveis)} im√≥veis encontrados

IM√ìVEIS ENCONTRADOS:
{chr(10).join([f"  {i+1}. {imovel['nome_imovel']} - R$ {imovel['valor']}" for i, imovel in enumerate(imoveis)])}

---
TESTE - Relat√≥rio gerado automaticamente
            """
            
            # Salvar relat√≥rios de teste
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            filename_resumido = f'teste_relatorio_resumido_{timestamp}.txt'
            with open(filename_resumido, 'w', encoding='utf-8') as f:
                f.write(relatorio_resumido)
            
            filename_detalhado = f'teste_relatorio_detalhado_{timestamp}.txt'
            with open(filename_detalhado, 'w', encoding='utf-8') as f:
                f.write(relatorio_detalhado)
            
            print(f"\n‚úÖ Relat√≥rio resumido salvo em '{filename_resumido}'")
            print(f"‚úÖ Relat√≥rio detalhado salvo em '{filename_detalhado}'")
            
            # Mostrar relat√≥rio resumido
            print(f"\nüìß RELAT√ìRIO RESUMIDO:")
            print(f"   {relatorio_resumido}")
            
            # Enviar por email
            print("\nüìß Preparando envio por email...")
            enviar_email_relatorio(relatorio_resumido, relatorio_detalhado)
            
            print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
            print("‚úÖ Busca de im√≥veis funcionando")
            print("‚úÖ Gera√ß√£o de relat√≥rios funcionando")
            print("‚úÖ Envio de email funcionando")
            
        else:
            print("‚ùå Nenhum im√≥vel encontrado na cidade de teste")
            print("üí° Verifique se a cidade est√° correta ou se h√° im√≥veis dispon√≠veis")
    
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        print("üí° Verifique se o scraper est√° funcionando corretamente")

if __name__ == "__main__":
    teste_uma_cidade() 